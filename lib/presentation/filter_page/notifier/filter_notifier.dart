import 'package:equatable/equatable.dart';import 'package:flutter/material.dart';import '/core/app_export.dart';import '../models/buyingformate_item_model.dart';import '../models/itemlocation_item_model.dart';import '../models/showonly_item_model.dart';import 'package:test1/presentation/filter_page/models/filter_model.dart';part 'filter_state.dart';final filterNotifier = StateNotifierProvider<FilterNotifier, FilterState>((ref) => FilterNotifier(FilterState(filterModelObj: FilterModel(buyingformateItemList: List.generate(5, (index) => BuyingformateItemModel()), itemlocationItemList: List.generate(4, (index) => ItemlocationItemModel()), showonlyItemList: List.generate(11, (index) => ShowonlyItemModel())))));
/// A notifier that manages the state of a Filter according to the event that is dispatched to it.
class FilterNotifier extends StateNotifier<FilterState> {FilterNotifier(FilterState state) : super(state);

void onSelectedChipView1(int index, bool value, ) { List<BuyingformateItemModel> newList = List<BuyingformateItemModel>.from(state.filterModelObj!.buyingformateItemList); newList[index] = newList[index].copyWith(isSelected: value); state = state.copyWith(filterModelObj: state.filterModelObj?.copyWith(buyingformateItemList: newList)); } 
void onSelectedChipView2(int index, bool value, ) { List<ItemlocationItemModel> newList = List<ItemlocationItemModel>.from(state.filterModelObj!.itemlocationItemList); newList[index] = newList[index].copyWith(isSelected: value); state = state.copyWith(filterModelObj: state.filterModelObj?.copyWith(itemlocationItemList: newList)); } 
void onSelectedChipView3(int index, bool value, ) { List<ShowonlyItemModel> newList = List<ShowonlyItemModel>.from(state.filterModelObj!.showonlyItemList); newList[index] = newList[index].copyWith(isSelected: value); state = state.copyWith(filterModelObj: state.filterModelObj?.copyWith(showonlyItemList: newList)); } 
 }
